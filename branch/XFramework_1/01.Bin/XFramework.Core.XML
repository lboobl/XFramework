<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XFramework.Core</name>
    </assembly>
    <members>
        <member name="T:XFramework.Core.Common">
            <summary>
            常用静态方法
            </summary>
        </member>
        <member name="M:XFramework.Core.Common.GetAppSetting(System.String)">
            <summary>
            取Appsetting节的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.GetExecutingDirectory">
            <summary>
            取当前正在运行的程序集的绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.True``1">
            <summary>
            返回真表达式
            </summary>
        </member>
        <member name="M:XFramework.Core.Common.False``1">
            <summary>
            返回假表达式
            </summary>
        </member>
        <member name="M:XFramework.Core.Common.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            拼接真表达式
            </summary>
        </member>
        <member name="M:XFramework.Core.Common.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            拼接假表达式
            </summary>
        </member>
        <member name="M:XFramework.Core.Common.Map``2(``0)">
            <summary>
            简单浅复制
            </summary>
            <typeparam name="T1">T1</typeparam>
            <typeparam name="T2">T2</typeparam>
            <param name="TSource">来源实体</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.Map``2(``0,EmitMapper.IMappingConfigurator)">
            <summary>
            根据配置映射两个实体
            </summary>
            <typeparam name="T1">T1</typeparam>
            <typeparam name="T2">T2</typeparam>
            <param name="TSource">来源实体</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.Execute``1(System.Action{``0},``0,System.String,System.Object[])">
            <summary>
            执行指定委托，开放此方法的目的是简化try catch 块的写法
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="predicate">任务</param>
            <param name="parameter">参数</param>
            <param name="message">附带消息</param>
            <param name="msgArgs">附带消息参数</param>
        </member>
        <member name="M:XFramework.Core.Common.Execute``2(System.Action{``0,``1},``0,``1,System.String,System.Object[])">
            <summary>
            执行指定委托，开放此方法的目的是简化try catch 块的写法
            </summary>
            <typeparam name="T1">参数1类型</typeparam>
            <typeparam name="T2">参数2类型</typeparam>
            <param name="predicate">任务</param>
            <param name="parameter1">参数1</param>
            <param name="parameter2">参数2</param>
            <param name="message">附带消息</param>
            <param name="msgArgs">附带消息参数</param>
        </member>
        <member name="M:XFramework.Core.Common.Execute``3(System.Action{``0,``1,``2},``0,``1,``2,System.String,System.Object[])">
            <summary>
            执行指定委托，开放此方法的目的是简化try catch 块的写法
            </summary>
            <typeparam name="T1">参数1类型</typeparam>
            <typeparam name="T2">参数2类型</typeparam>
            <typeparam name="T3">参数3类型</typeparam>
            <param name="predicate">任务</param>
            <param name="parameter1">参数1</param>
            <param name="parameter2">参数2</param>
            <param name="parameter3">参数3</param>
            <param name="message">附带消息</param>
            <param name="msgArgs">附带消息参数</param>
        </member>
        <member name="M:XFramework.Core.Common.Execute(System.Action,System.String,System.Object[])">
            <summary>
            执行指定委托，开放此方法的目的是简化try catch 块的写法
            </summary>
            <param name="predicate">任务</param>
            <param name="message">附带消息</param>
            <param name="msgArgs">附带消息参数</param>
        </member>
        <member name="M:XFramework.Core.Common.Execute``1(System.Func{``0},System.String,System.Object[])">
            <summary>
            执行指定委托，开放此方法的目的是简化try catch 块的写法
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="predicate">任务</param>
            <param name="message">附带消息</param>
            <param name="msgArgs">附带消息参数</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.Execute``2(System.Func{``0,``1},``0,System.String,System.Object[])">
            <summary>
            执行指定委托，开放此方法的目的是简化try catch 块的写法
            </summary>
            <typeparam name="T1">参数1类型</typeparam>
            <typeparam name="T2">参数2类型</typeparam>
            <param name="predicate">任务</param>
            <param name="parameter">参数</param>
            <param name="message">附带消息</param>
            <param name="msgArgs">附带消息参数</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.LogError(System.Delegate,System.Exception,System.String,System.Object[])">
            <summary>
            记录错误信息
            </summary>
            <param name="predicate">委托</param>
            <param name="ex">执行委托时的异常</param>
            <param name="message">出现异常时的附加消息</param>
            <param name="msgArgs">消息参数</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.ToEntityList``1(System.Data.DataTable)">
            <summary>
            数据集转实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="table">数据源</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.Common.FullScreenShot">
            <summary>
            全屏截图
            </summary>
            <returns></returns>
        </member>
        <member name="P:XFramework.Core.Common.Logger">
            <summary>
            取日志记录器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.EmitMapper.CreateCloneMethod3(System.Type,System.Collections.Generic.Dictionary{XFramework.Core.EmitMapper.Identity,System.Object})">
            <summary>
            对属性进行复制，不查找父类，用于当前实体对象的属性拷贝。
            </summary>
            <param name="type">实体类型</param>
            <param name="objects">复制链</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.EmitMapper.ToObjectCopy``1(``0)">
            <summary>
            创建对象深度复制的副本
            </summary>
        </member>
        <member name="M:XFramework.Core.EmitMapper.ObjectCopyTo``1(``0,``0)">
            <summary>
            将source对象的所有属性复制到target对象中，深度复制
            </summary>
        </member>
        <member name="M:XFramework.Core.EmitMapper.PropCopyTo``1(``0,``0)">
            <summary>
            将source对象的所有属性复制到target对象中，仅对公有属性复制，不查找父类，不创建引用属性，但复制引用属性内部的属性。
            </summary>
        </member>
        <member name="T:XFramework.Core.CryptHepler">
            <summary>
            字符串加解密助手类
            </summary>
        </member>
        <member name="M:XFramework.Core.CryptHepler.MD5(System.String)">
            <summary>
            取输入字符串的MD5散列值
            </summary>
            <param name="input">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.CryptHepler.SHA1(System.String)">
            <summary>
            取输入字符串的SHA1散列值
            </summary>
            <param name="input">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.CryptHepler.MD5(System.IO.Stream)">
            <summary>
            获取输入流的由MD5计算的Hash值，不可逆转
            </summary>
            <param name="inputStream">输入流</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.CryptHepler.SHA1(System.IO.Stream)">
            <summary>
            获取输入流的由SHA1计算的Hash值，不可逆转
            </summary>
            <param name="inputStream">输入流</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.CryptHepler.VerifyMD5Hash(System.IO.Stream,System.String)">
            <summary>
            验证输入流由MD5计算的Hash值
            </summary>
            <param name="inputStream">输入流</param>
            <param name="hash">哈希值</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.CryptHepler.DecryptDes(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="input">要解密的字符串</param>
             <param name="decryptKey">密钥，必须为８位?</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.CryptHepler.EncryptDes(System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="input">加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SecurityHelper.DecryptDes(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString">要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SecurityHelper.DecryptDes(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString">要解密的字符串</param>
             <param name="decryptKey">密钥，必须为８位?</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SecurityHelper.EncryptDes(System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SecurityHelper.EncryptDes(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SecurityHelper.Convert2HexMD5(System.String,System.Text.Encoding)">
            <summary>
            转为md5加密的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XFramework.Core.SerializeHelper">
            <summary>
            序列化助手类
            </summary>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.SerializeToJson``1(``0)">
            <summary>
            对象序列化成Json字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象（对象需使用DataContract特性标记，属性需使用DataMember特性标记）</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DeserializeFromJson``1(System.String)">
            <summary>
            Json字符串反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="strJson">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.SerializeToXml``1(``0)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.SerializeToXml``1(``0,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象</param>
            <param name="root">指定根对象的名称</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.SerializeToXml``1(``0,System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="obj">要序列化的对象</param>
            <param name="root">指定根对象的名称</param>
            <param name="defaultNamespace">xml命名空间</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.SerializeToXml``1(System.Xml.Serialization.XmlSerializer,``0)">
            <summary>
            对象序列化成 XML 字符串
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="serializer">序列化器</param>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DeserialFromXml``1(System.String)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="xml">xml内容</param>
            <param name="root">指定根对象的名称</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DeserialFromXml``1(System.String,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="xml">xml内容</param>
            <param name="root">指定根对象的名称</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DeserialFromXml``1(System.String,System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="xml">xml内容</param>
            <param name="root">指定根对象的名称</param>
            <param name="defaultNamespace">xml命名空间</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DeserialFromXml``1(System.Xml.Serialization.XmlSerializer,System.String)">
            <summary>
            XML 字符串 反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">序列化器</param>
            <param name="xml">xml内容</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DataContractSerialize(System.Object,System.String)">
            <summary>
            DataContract　序列化
            </summary>
            <param name="obj"></param>
            <param name="encodeName"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.SerializeHelper.DataContractDeSerialize``1(System.String,System.String)">
            <summary>
            DataContract　反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objData"></param>
            <returns></returns>
        </member>
        <member name="T:XFramework.Core.WebHelper">
            <summary>
            WEB助手类
            </summary>
        </member>
        <member name="M:XFramework.Core.WebHelper.SetCache``1(System.String,``0,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>
            将指定项添加到 System.Web.Caching.Cache 对象，该对象具有依赖项、到期和优先级策略以及一个委托（可用于在从 Cache 移除插入项时通知应用程序）
            </summary>
            <param name="key">用于引用该项的缓存键</param>
            <param name="TValue">要添加到缓存的项</param>
            <param name="dependencies">该项的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 null。</param>
            <param name="absoluteExpiration">所添加对象将到期并被从缓存中移除的时间。如果使用可调到期，则 absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</param>
            <param name="slidingExpiration">最后一次访问所添加对象时与该对象到期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并从缓存中移除。如果使用绝对到期，则slidingExpiration 参数必须为 System.Web.Caching.Cache.NoSlidingExpiration。</param>
            <param name="priority">对象的相对成本</param>
            <param name="onRemoveCallback">在从缓存中移除对象时所调用的委托</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.GetCache``1(System.String)">
            <summary>
            从 System.Web.Caching.Cache 对象检索指定项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:XFramework.Core.WebHelper.SetCookie(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            设置COOKIE
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="encrypt">是否加密cookie</param>
            <param name="expires">过期时间，分钟为单位</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.SetCookie(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            设置COOKIE
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="encrypt">是否加密cookie</param>
            <param name="expires">过期时间，分钟为单位</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.SetCookie``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            设置COOKIE
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires">过期时间，分钟为单位</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.SetCookie``1(System.String,``0,System.DateTime,System.Boolean)">
            <summary>
            设置COOKIE
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expires">过期时间，分钟为单位</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.GetCookie``1(System.String,System.Boolean)">
            <summary>
            取指定KEY值的COOKIE
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.GetCookie(System.String,System.Boolean)">
            <summary>
            取指定KEY值的COOKIE
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.RemoveCookie(System.String)">
            <summary>
            删除COOKIE
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XFramework.Core.WebHelper.SetAuthentication(System.String,System.String,System.Int32)">
            <summary>
            写登录Cookie
            </summary>
            <param name="cookieName">cookie名称</param>
            <param name="userData">存储在票证中的用户特定的数据。</param>
            <param name="expiration">过期时间（单位：分钟）</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.ClearAuthentication(System.Boolean,System.String)">
            <summary>
            清除验证COOKIE
            </summary>
            <param name="redirect">清除验证cookie后是否应该重定向</param>
            <param name="url">重定向地址</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.DownloadFile(System.String,System.Boolean,System.Int64,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="relativePath">相对路径</param>
            <param name="limitSpeed">是否限制客户端的下载速度</param>
            <param name="speed">客户端下载速度（B/MS）</param>
            <param name="delete">下载完成后是否删除文件</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.ToHex(System.String)">
            <summary>
            将非ASCII字符进行编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.ToHex(System.Char)">
            <summary>
            将一个非ASCII字符进行编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.NeedEncode(System.Char)">
            <summary>
            检测字符是否需要编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.RequestPost(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用POST模式访问服务器
            </summary>
            <param name="uri">地址</param>
            <param name="postData">上传的参数</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.WebHelper.CreateThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            生成缩略图，并把缩略图缩放到指定的大小，缩放要求不变形、不裁剪
            </summary>
            <param name="fileName">图片文件完全路径</param>
            <param name="destWidth">目标宽度</param>
            <param name="destHeight">目标高度</param>
        </member>
        <member name="M:XFramework.Core.WebHelper.CreateThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图，并把缩略图缩放到指定的大小，缩放要求不变形、不裁剪
            </summary>
            <param name="srcImage">来源图片</param>
            <param name="destWidth">目标宽度</param>
            <param name="destHeight">目标高度</param>
        </member>
        <member name="T:XFramework.Core.Mailer">
            <summary>
            Mailer 发送Email的类
            </summary>
        </member>
        <member name="M:XFramework.Core.Mailer.#ctor">
            <summary>
            Mailer 构造函数
            </summary>
        </member>
        <member name="M:XFramework.Core.Mailer.SendMail">
            <summary>
            发smtp邮件
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.To">
            <summary>
            收件人地址,可以是以;或,分隔的mail地址
            标准的方式是以,(逗号)分隔
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.CC">
            <summary>
            收件人地址,可以是以;或,分隔的mail地址
            标准的方式是以,(逗号)分隔
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.Content">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.DisplayName">
            <summary>
            发件人显示的名称
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.SmtpServer">
            <summary>
            邮件发送服务器地址或dns
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.Password">
            <summary>
            发件箱密码,可以为空
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.IsBodyHtml">
            <summary>
            邮件内容是否以html的形式, 默认为false
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.Attachments">
            <summary>
            文本附件路径,多个附件路径用分号分隔开
            </summary>
        </member>
        <member name="P:XFramework.Core.Mailer.Priority">
            <summary>
            邮件的级别,默认为正常Normal
            </summary>
        </member>
        <member name="T:XFramework.Core.AccessorFactory">
            <summary>
            Accessor factory
            </summary>
        </member>
        <member name="M:XFramework.Core.AccessorFactory.#ctor(XFramework.Core.ISetAccessorFactory,XFramework.Core.IGetAccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.AccessorFactory"/> class.
            </summary>
            <param name="setAccessorFactory">The set accessor factory.</param>
            <param name="getAccessorFactory">The get accessor factory.</param>
        </member>
        <member name="P:XFramework.Core.AccessorFactory.SetAccessorFactory">
            <summary>
            The factory which build <see cref="T:XFramework.Core.ISetAccessor"/>
            </summary>
        </member>
        <member name="P:XFramework.Core.AccessorFactory.GetAccessorFactory">
            <summary>
            The factory which build <see cref="T:XFramework.Core.IGetAccessor"/>
            </summary>
        </member>
        <member name="T:XFramework.Core.BaseAccessor">
            <summary>
            Abstract base class for member accessor
            </summary>
        </member>
        <member name="F:XFramework.Core.BaseAccessor.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:XFramework.Core.BaseAccessor.targetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="F:XFramework.Core.BaseAccessor.nullInternal">
            <summary>
            The null internal value used by this member type 
            </summary>
        </member>
        <member name="F:XFramework.Core.BaseAccessor.typeToOpcode">
            <summary>
            List of type-opCode
            </summary>
        </member>
        <member name="M:XFramework.Core.BaseAccessor.#cctor">
            <summary>
            Static constructor
            "Initialize a private IDictionary with type-opCode pairs 
            </summary>
        </member>
        <member name="M:XFramework.Core.BaseAccessor.GetPropertyInfo(System.Type)">
            <summary>
            Gets the property info.
            </summary>
            <param name="target">The target type.</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.BaseAccessor.GetNullInternal(System.Type)">
            <summary>
            Get the null value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XFramework.Core.DelegateFieldGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.DelegateFieldGetAccessor"/> class defines a field get accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:XFramework.Core.IGet"/>  
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="T:XFramework.Core.IGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.IGetAccessor"/> interface defines a field/property get accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:XFramework.Core.IGet"/>
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:XFramework.Core.IAccessor">
            <summary>
            The <see cref="T:XFramework.Core.IAccessor"/> interface defines a field/property contract.
            </summary>
        </member>
        <member name="P:XFramework.Core.IAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:XFramework.Core.IAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
        </member>
        <member name="T:XFramework.Core.IGet">
            <summary>
            The <see cref="T:XFramework.Core.IGet"/> interface defines a field/property get contrat to get the
            value of a field or a property.
            </summary>
        </member>
        <member name="M:XFramework.Core.IGet.Get(System.Object)">
            <summary>
            Gets the value stored in the field/property for the specified target.
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The value.</returns>
        </member>
        <member name="F:XFramework.Core.DelegateFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:XFramework.Core.DelegateFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="M:XFramework.Core.DelegateFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DelegateFieldGetAccessor"/> class
            for field get access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:XFramework.Core.DelegateFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the field value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:XFramework.Core.DelegateFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.DelegateFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.DelegateFieldSetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.DelegateFieldSetAccessor"/> class defines a field get accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:XFramework.Core.ISet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="T:XFramework.Core.ISetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.ISetAccessor"/> interface defines a field/property set accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:XFramework.Core.ISet"/> 
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:XFramework.Core.ISet">
            <summary>
            The <see cref="T:XFramework.Core.ISet"/> interface defines a field/property set contrat to set the
            value on a field or property.
            </summary>
        </member>
        <member name="M:XFramework.Core.ISet.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field/property of the specified target.
            </summary>
            <param name="target">Object to set the field/property on.</param>
            <param name="value">Value.</param>
        </member>
        <member name="F:XFramework.Core.DelegateFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:XFramework.Core.DelegateFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="M:XFramework.Core.DelegateFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DelegateFieldSetAccessor"/> class
            for field get access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:XFramework.Core.DelegateFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:XFramework.Core.DelegateFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.DelegateFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.DelegatePropertyGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.DelegatePropertyGetAccessor"/> class defines a get property accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:XFramework.Core.IGet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:XFramework.Core.DelegatePropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:XFramework.Core.DelegatePropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.DelegatePropertyGetAccessor"/> class
            for get property access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:XFramework.Core.DelegatePropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the field value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:XFramework.Core.DelegatePropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.DelegatePropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.DelegatePropertySetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.DelegatePropertySetAccessor"/> class defines a set property accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:XFramework.Core.ISet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:XFramework.Core.DelegatePropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:XFramework.Core.DelegatePropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.DelegatePropertySetAccessor"/> class
            for set property access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="M:XFramework.Core.DelegatePropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:XFramework.Core.DelegatePropertySetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.DelegatePropertySetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.EmitFieldGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.EmitFieldGetAccessor"/> class provides an IL-based get access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="F:XFramework.Core.EmitFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitFieldGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:XFramework.Core.EmitFieldGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitFieldGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitFieldGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.
            </summary>
            <param name="target">Object to retrieve the field from.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:XFramework.Core.EmitFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.EmitFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.EmitFieldSetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.EmitFieldSetAccessor"/> class provides an IL-based set access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="F:XFramework.Core.EmitFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitFieldSetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:XFramework.Core.EmitFieldSetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitFieldSetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitFieldSetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:XFramework.Core.EmitFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.EmitFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.EmitPropertyGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.EmitPropertyGetAccessor"/> class provides an IL-based get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertyGetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertyGetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertyGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:XFramework.Core.EmitPropertyGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.EmitPropertyGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:XFramework.Core.EmitPropertyGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitPropertyGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the property value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:XFramework.Core.EmitPropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.EmitPropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.EmitPropertySetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.EmitPropertySetAccessor"/> class provides an IL-based set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertySetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertySetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:XFramework.Core.EmitPropertySetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:XFramework.Core.EmitPropertySetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.EmitPropertySetAccessor"/> class.
            Generates the implementation for setter methods.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:XFramework.Core.EmitPropertySetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitPropertySetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:XFramework.Core.EmitPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the property for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:XFramework.Core.EmitPropertySetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
            <value></value>
        </member>
        <member name="P:XFramework.Core.EmitPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
            <value></value>
        </member>
        <member name="T:XFramework.Core.GetAccessorFactory">
            <summary>
            A factory to build <see cref="T:XFramework.Core.IGetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="T:XFramework.Core.IGetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:XFramework.Core.IGetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:XFramework.Core.IGetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:XFramework.Core.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.GetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreateDynamicPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreateDynamicFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreateReflectionPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreateReflectionFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.GetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:XFramework.Core.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:XFramework.Core.HashCodeProvider">
            <summary>
            Summary description for HashCodeProvider.
            </summary>
        </member>
        <member name="M:XFramework.Core.HashCodeProvider.GetIdentityHashCode(System.Object)">
            <summary>
            Supplies a hash code for an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A hash code</returns>
            <remarks>
            Buggy in .NET V1.0
            .NET Fx v1.1 Update: 
            As of v1.1 of the framework, there is a method System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object) that does this as well.
            I will not use to Keep compatiblity with .NET V1.0
            </remarks>
        </member>
        <member name="T:XFramework.Core.ISetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:XFramework.Core.ISetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:XFramework.Core.ISetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:XFramework.Core.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:XFramework.Core.ReflectionFieldGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.ReflectionFieldGetAccessor"/> class provides an reflection get access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:XFramework.Core.ReflectionFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.ReflectionFieldGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:XFramework.Core.ReflectionFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.       
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The field alue.</returns>
        </member>
        <member name="P:XFramework.Core.ReflectionFieldGetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:XFramework.Core.ReflectionFieldGetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="T:XFramework.Core.ReflectionFieldSetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.ReflectionFieldSetAccessor"/> class provides an reflection set access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:XFramework.Core.ReflectionFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.ReflectionFieldSetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:XFramework.Core.ReflectionFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:XFramework.Core.ReflectionFieldSetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:XFramework.Core.ReflectionFieldSetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="T:XFramework.Core.ReflectionInfo">
            <summary>
            This class represents a cached set of class definition information that
            allows for easy mapping between property names and get/set methods.
            </summary>
        </member>
        <member name="F:XFramework.Core.ReflectionInfo.BINDING_FLAGS_PROPERTY">
            <summary>
            
            </summary>
        </member>
        <member name="F:XFramework.Core.ReflectionInfo.BINDING_FLAGS_FIELD">
            <summary>
            
            </summary>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.AddMembers(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetSetter(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetGetter(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetSetterType(System.String)">
            <summary>
            Gets the type of the member.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetGetterType(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetReadableMemberNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetWriteableMemberNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.HasWritableMember(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.HasReadableMember(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.IsKnownType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XFramework.Core.ReflectionInfo.GetInstance(System.Type)">
            <summary>
            Gets an instance of ReflectionInfo for the specified type.
            </summary>summary>
            <param name="type">The type for which to lookup the method cache.</param>
            <returns>The properties cache for the type</returns>
        </member>
        <member name="P:XFramework.Core.ReflectionInfo.ClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XFramework.Core.ReflectionInfo.ReadWritableMembers">
            <summary>
            
            </summary>
        </member>
        <member name="T:XFramework.Core.ReflectionPropertyGetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.ReflectionPropertyGetAccessor"/> class provides an reflection get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:XFramework.Core.ReflectionPropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.ReflectionPropertyGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:XFramework.Core.ReflectionPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the property for 
            the specified target.
            </summary>
            <param name="target">Object to retrieve the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:XFramework.Core.ReflectionPropertyGetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:XFramework.Core.ReflectionPropertyGetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="T:XFramework.Core.ReflectionPropertySetAccessor">
            <summary>
            The <see cref="T:XFramework.Core.ReflectionPropertySetAccessor"/> class provides an reflection set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:XFramework.Core.ReflectionPropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.ReflectionPropertySetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:XFramework.Core.ReflectionPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the property of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:XFramework.Core.ReflectionPropertySetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:XFramework.Core.ReflectionPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="T:XFramework.Core.SetAccessorFactory">
            <summary>
            A factory to build <see cref="T:XFramework.Core.SetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XFramework.Core.SetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreateDynamicPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreateDynamicFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreateReflectionPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreateReflectionFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:XFramework.Core.SetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:XFramework.Core.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:XFramework.Core.XDictionary`2">
            <summary>
            简化索引写法－字典
            </summary>
        </member>
        <member name="P:XFramework.Core.XDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值。
            </summary>
            <param name="key">要获取或设置的值的键。</param>
            <returns>与指定的键相关联的值</returns>
        </member>
    </members>
</doc>
